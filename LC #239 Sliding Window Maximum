class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;                                  //storing the indices 
        vector<int> result;

        for(int i = 0 ; i < nums.size() ; i++)
        {
            if(!dq.empty() && dq.front() == i - k)                    //removing the elements that are out of the window
            {
                dq.pop_front();
            }

            while(!dq.empty() && nums[dq.back()] < nums[i])          // remove all element smaller than current element and 
                                                                    // nums[dq.back()] < nums[i] ---> if the current number is greater than previous number than no need of considering the pervious number... just time waste 
            { 
                dq.pop_back();
            }

            dq.push_back(i);                                           //push current element index

            if(i >= k - 1) {                                           //when index or window size increase send one to the result;
                result.push_back(nums[dq.front()]);
            }
        }

        return result;



        
    }
};
