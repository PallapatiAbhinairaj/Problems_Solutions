//Optmised Approach
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n = nums.size();
        int left = 0;
        int sum = 0;
        int minlength = INT_MAX;

        for(int right = 0 ; right < n ; right++)
        {
             sum += nums[right];
             while(sum >= target)
             {
                minlength = min(minlength , right - left + 1);
                sum = sum - nums[left];
                left++;
             }
        }

        return (minlength == INT_MAX) ? 0 : minlength;

                
    }
};

//BruteForce Approach:Time limit exceeded 
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {

        int n = nums.size();
        int minLength = INT_MAX;
        for(int i = 0 ; i < n ; i++)
        {
            int sum = 0;
            for(int j = i ; j < n ; j++)
            {
                sum += nums[j];
                if(sum >= target)
                {
                    minLength = min(minLength , j - i + 1);
                    break;
                }
            }
        }

        return (minLength == INT_MAX) ? 0:minLength;   //Ternary Operator -->(condition) ? value_if_true : value_if_false)
        
    }
};

