//Brute Force Approach
class Solution {
public:
    int numberOfSubstrings(string s) {

        int n = s.size();
        int count = 0;

        for(int i = 0 ; i < n ; i++)
        {
            for(int j = i ; j < n ; j++)
            {
                bool hasA = false;
                bool hasB = false;
                bool hasC = false;

                for(int k = i ; k <= j ; k++)
                {
                    if(s[k] == 'a')
                    {
                        hasA = true;
                    }
                    if(s[k] == 'b')
                    {
                        hasB = true;
                    }
                    if(s[k] == 'c')
                    {
                        hasC = true;
                    }
                }
                if(hasA && hasB && hasC)
                {
                    count++;
                }
            }
        }

        return count;

        
    }
};




//Optimised Approach:

class Solution {
public:
    int numberOfSubstrings(string s) {

        int left = 0;
        int n = s.size();
        int ans = 0;
        int count[3]  {0,0,0};

        for(int right = 0; right < n ; right++)
        {
            count[s[right] - 'a']++;    //ASCI values here , so it gets increasing like a , b , c ....

            while(count[0] > 0 && count[1] > 0 && count[2] > 0)
            {
                ans += (n - right);

                count[s[left] - 'a']--;
                left++;
            }
        }

        return ans;
        
    }
};
