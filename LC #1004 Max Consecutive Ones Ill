//Optimised Solution:
class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {

        int maxlen = 0;
        int zeroCount = 0;
        int left = 0;
        for(int right = 0 ; right < nums.size(); right++)
        {
            if(nums[right] == 0)
            {
                zeroCount++;
            }
            while(zeroCount > k)
            {
                if(nums[left] == 0)
                {
                    zeroCount--;
                }
                left++;
            }
                maxlen = max(maxlen , right - left + 1);
        }       
        return maxlen;
    }
};


//BruteForce method:  //results in time limit exceed

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {

        int n = nums.size();
        int maxLen = 0;
        //int zeroCount = 0;


        for(int i = 0;i < n;i++)
        {
            int zeroCount = 0;
            for(int j =  i; j < n ; j++)
            {
                if(nums[j] == 0)
                {
                    zeroCount++;                    
                }
                if(zeroCount > k)
                {
                    break;
                }
                maxLen = max(maxLen , j - i + 1);
            }
            
        }
        return maxLen;
    }
};
