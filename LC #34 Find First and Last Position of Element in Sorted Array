class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int first = firstSearch(nums , target);
        int second = secondSearch(nums , target);    
        return {first, second};
    }

private:

    int firstSearch(vector<int>& nums , int target)
    {
        int left = 0;
        int n = nums.size();
        int right = n -1;
        int ans = -1;

        while(left <= right)
        {
            int mid = left + (right - left)/2;
            if(nums[mid] == target)
            {
                ans = mid;
                right = mid - 1;
            }
            else if(nums[mid] < target)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }

        return ans;
    }

    int secondSearch(vector<int>& nums , int target)
    {
        int n = nums.size();
        int left = 0;
        int right = n -1;
        int ans = -1;
        

        while(left <= right)
        {
            int mid = left + (right - left)/2;
            if(nums[mid] == target)
            {
                ans = mid;
                left = mid + 1;
            }
            else if(nums[mid] < target)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }

        return ans;
    }
};
