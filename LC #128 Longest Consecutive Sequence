Question link:https://leetcode.com/problems/longest-consecutive-sequence/


Bruteforce approach : 

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {

        int n = nums.size();
        sort(nums.begin() , nums.end());
        int currStreak = 1;
        int maxStreak = 1;

        if(n == 0) return 0;

        for(int i = 0 ; i < n - 1 ; i++)
        {
    
            if(nums[i+1] == nums[i])
            {
                continue;
            }

            else if(nums[i+1] == nums[i] + 1)
            {
                currStreak++;
            }

            else
            {
                currStreak = 1;
            }

            maxStreak = max(maxStreak , currStreak);
        }

        return maxStreak;

        
    }
};



optmised approach using unordered_SETS : 

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {

        int n = nums.size();
        if(n == 0) return 0;

        int longest = 1;

        unordered_set<int>st;

        for(int i = 0 ; i < n ; i++)
        {
            st.insert(nums[i]);
        }

        for(auto it:st)
        {
            if(st.find(it-1) == st.end())
            {
                int cnt = 1;
                int x = it;

                while(st.find(x+1) != st.end())
                {
                    x = x + 1;
                    cnt = cnt + 1;
                }     

                longest = max(longest , cnt);
            }

            
        }
        return longest;
    }
};


