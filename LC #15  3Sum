//Optimised Solution:

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());

        vector<vector<int>>res; 


        int n = nums.size();

        for(int i = 0 ; i < n - 2 ; i++)
        {
            if(i>0 && nums[i] == nums[i-1]) continue;
            int left = i + 1;
            int right = n - 1;
            
            while(left < right)
            {
                

                int sum = nums[i] + nums[left] + nums[right];

                if(sum == 0)
                {
                    res.push_back({nums[i] , nums[left] , nums[right]});
                    left++;
                    right--;
                    while(left < right && nums[left] == nums[left-1]) left++;
                    while(left < right && nums[right] == nums[right+1]) right--;
                }
                else if(sum < 0)
                {
                    left++;
                }
                else
                {
                    right--;
                }


            }

        }

        return res;

        
    }
};



//BruteForce Approach: // but "time limit" exceed for higher test case....
        
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        set<vector<int>>uniqueTriplets;

        for(int i = 0 ; i < n ; i++)
        {
            for(int j = i + 1 ; j < n ; j++)
            {
                for(int k = j + 1 ; k < n ; k++)
                {
                    if(nums[i] + nums[j] + nums[k] == 0)
                    {
                        vector<int>triplet = {nums[i] , nums[j] , nums[k]};
                        sort(triplet.begin(), triplet.end());
                        uniqueTriplets.insert(triplet);
                    }


                }
            }
        }

        vector<vector<int>> result(uniqueTriplets.begin(),uniqueTriplets.end());
        
        
        return result;

        
    }

    
};
