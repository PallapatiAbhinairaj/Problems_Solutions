//Optimised Solution:

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {

        int n = nums.size();
        sort(nums.begin() , nums.end());

        vector<vector<int>>ans;

        for(int i = 0 ; i < n ; i++)
        {
            int j = i + 1;
            int k = n-1;

            if(i > 0 && nums[i] == nums[i-1]) continue;

            while(j<k)
            {
            int sum = nums[i] + nums[j] + nums[k];

            if(sum < 0)
            {
                j++;
            }
            else if(sum > 0)
            {
                k--;
            }
            else
            {
                vector<int>temp = {nums[i] , nums[j] , nums[k]};
                ans.push_back(temp);
                j++;
                k--;
                while(j < k && nums[j] == nums[j-1]) j++;
                while(j < k && nums[k] == nums[k+1]) k++;
            }
            }
        }

        return ans;
        
    }
};



//BruteForce Approach: // but "time limit" exceed for higher test case....
        
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        set<vector<int>>uniqueTriplets;

        for(int i = 0 ; i < n ; i++)
        {
            for(int j = i + 1 ; j < n ; j++)
            {
                for(int k = j + 1 ; k < n ; k++)
                {
                    if(nums[i] + nums[j] + nums[k] == 0)
                    {
                        vector<int>triplet = {nums[i] , nums[j] , nums[k]};
                        sort(triplet.begin(), triplet.end());
                        uniqueTriplets.insert(triplet);
                    }


                }
            }
        }

        vector<vector<int>> result(uniqueTriplets.begin(),uniqueTriplets.end());
        
        
        return result;

        
    }

    
};
