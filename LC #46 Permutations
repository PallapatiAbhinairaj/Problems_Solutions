//Brute Force method : 

class Solution {
public:

    vector<vector<int>> permute(vector<int>& nums) {

        vector<vector<int>> result;

        sort(nums.begin() , nums.end());

        do{
            result.push_back(nums);
        } while(next_permutation(nums.begin() , nums.end()));

        return result;
        
    }
};


//Optimised method using "in place swap"

class Solution {
public:

    vector<vector<int>> result;


    void backtrack(vector<int>& nums ,int  start)
    {
        if(start == nums.size())
        {
            result.push_back(nums);
            return;
        }

        for(int i = start ; i < nums.size() ; i++)
        {
            swap(nums[start] , nums[i]);
            backtrack(nums , start + 1);
            swap(nums[start] , nums[i]);
        }
    }



    vector<vector<int>> permute(vector<int>& nums) {

        backtrack(nums , 0);
        return result;
        
    }




};
