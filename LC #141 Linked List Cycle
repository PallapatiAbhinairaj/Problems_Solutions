/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {

        if(head == NULL || head -> next == NULL)
        {
            return false;
        }

        ListNode* slow = head;
        ListNode* fast = head;

        while(fast != NULL && fast -> next != NULL )
        {
            slow = slow -> next;
            fast = fast -> next -> next;

            if(slow == fast)
            {
                return true;
            }
        }

        return false;
        
    }
};
--------------------------------------------------------------------------------
//BruteForce approach:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_set<ListNode*>visited;
        ListNode* current = head;

        while(current != nullptr)
        {
            if(visited.count(current))
            {
                return true;
            }
            visited.insert(current);
            current = current -> next;
        }
        return false;
        
    }
};
