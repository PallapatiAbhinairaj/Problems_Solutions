/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    unordered_map<int , int> inorderIndex;
    int preIndex = 0;


    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i = 0 ; i < inorder.size(); i++){
            inorderIndex[inorder[i]] = i;
        }

        return helper(preorder , 0 , inorder.size() - 1);
        
    }


    TreeNode* helper(vector<int>& preorder , int inLeft , int inRight) {
        if(inLeft > inRight) return NULL;   //s0 base case

        int rootVal = preorder[preIndex++];             //s1 pick root from pre order;
        TreeNode* root = new TreeNode(rootVal);

        int idx = inorderIndex[rootVal];

        root -> left = helper (preorder , inLeft , idx - 1);
        root -> right = helper (preorder , idx + 1  , inRight);

        return root;


    }
};
