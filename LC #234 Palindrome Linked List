/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* reverseList(ListNode* head)
    {
        ListNode* temp = head;
        ListNode* prev = NULL;

        while(temp != NULL)
        {
            ListNode* next = temp -> next;
            temp -> next = prev;
            prev = temp;
            temp = next;
        }

        return prev;
    }


    bool isPalindrome(ListNode* head) {

        if(head == NULL)
        {
            return false;
        }

        ListNode* slow = head;
        ListNode* fast = head;

        while(fast -> next != NULL && fast -> next -> next != NULL)
        {
            slow = slow -> next;
            fast = fast -> next -> next;                               //slow will be in middle 
        }

        ListNode* firstHalf = head;
        ListNode* secondHalf = reverseList(slow -> next);            // reversing the ll from middle 

        while(secondHalf != NULL)
        {
            if(firstHalf -> val != secondHalf -> val)                // checking if the first half and second half are same or not
            {
                return false;
            }
            firstHalf = firstHalf -> next;
            secondHalf = secondHalf -> next;
        }

        return true;

        









        
    }
};
